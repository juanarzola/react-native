
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleJniCpp.js
 */

#include "EvernoteTurboModule.h"

namespace facebook {
namespace react {

static facebook::jsi::Value __hostFunction_flowSchemaSpecJSI_setAnObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, BooleanKind, "setAnObject", "(Lcom/facebook/react/bridge/ReadableMap;)Z", args, count);
}

static facebook::jsi::Value __hostFunction_flowSchemaSpecJSI_getAnObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, ObjectKind, "getAnObject", "()Lcom/facebook/react/bridge/WritableMap;", args, count);
}

flowSchemaSpecJSI::flowSchemaSpecJSI(const JavaTurboModule::InitParams &params)
  : JavaTurboModule(params) {
  methodMap_["setAnObject"] = MethodMetadata {1, __hostFunction_flowSchemaSpecJSI_setAnObject};
  methodMap_["getAnObject"] = MethodMetadata {0, __hostFunction_flowSchemaSpecJSI_getAnObject};
}

std::shared_ptr<TurboModule> EvernoteTurboModule_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params) {
  if (moduleName == "EvernoteTurboModule") {
    return std::make_shared<flowSchemaSpecJSI>(params);
  }
  return nullptr;
}

} // namespace react
} // namespace facebook
